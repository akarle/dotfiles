" .vimrc by Alex Karle
" Hosted at https://github.com/akarle/dotvim
"
" Inspired by tips all over the interwebs

" GENERAL EDITOR SETTINGS {{{
" Try to be platform agnostic:
if has('win64') || has('win32')
    let s:vimdir = expand($HOME . '/vimfiles')
else
    let s:vimdir = expand($HOME . '/.vim')
endif

" Space related
set softtabstop=4                   " <TAB> is 4 spaces (when expandtab set)
set shiftwidth=4                    " >> will indent 4 spaces
set expandtab                       " Needed to replace <TAB> with spaces
set autoindent                      " Indent carries over on new line
set smarttab                        " Use shiftwidth for <TAB> and <BS>

" Search related
set hlsearch                        " Highlight searches
set incsearch                       " Incrementally search

" Faster grepping! (use ripgrep if available for :grep and :FZF)
if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --glob "!.git/*"'
endif

" Key related behavior
set backspace=indent,eol,start      " Backspace should function as expected
set foldopen-=block                 " {}, (), [] commands don't open folds
set ttimeout                        " Tell how to interpret key codes (used below)
set ttimeoutlen=30                  " Low keycode timeout to avoid <ESC> delay

" Other
set modelines=0                     " Disable modelines for security
set encoding=utf-8                  " Encoding
set history=10000                   " Remember last 1000 :commands
set scrolloff=5                     " Scroll at 5 rows from top/bot of screen
filetype plugin indent on           " Enable filetype specific plugins/indent
set tags+=./.vimtags,.vimtags       " Look in .vimtags files for ctags

" Persistent undo
if has('persistent_undo') && isdirectory(s:vimdir . '/undo')
    exe 'set undodir='.s:vimdir.'/undo/'
    set undofile                    " Do indeed create said files
    set undolevels=1000             " Max # changes that can be undone
    set undoreload=10000            " Saves undofile on reload (:e) if < 10k LOC
endif

" Use ~/.vim/swp if avail (else .) for backup and swp files respectively
exe 'set backupdir='.s:vimdir.'/swp,.'
exe 'set directory='.s:vimdir.'/swp,.'
" }}}

" PLUGIN RELATED SETTINGS {{{
" Set pdf viewer to skim for vimtex
let g:vimtex_view_method='skim'

" Don't use powerline font in airline (not neces. installed)
let g:airline_powerline_fonts = 0

" This enables folding in the built in markdown ftplugin
let g:markdown_folding = 1

" netrw style settings
let g:netrw_banner=0                " disable banner
let g:netrw_liststyle=1             " details view

" Mojolicious syntax highlighting for Mojolicious::Lite
let mojo_highlight_data = 1

" git-messenger with popup windows is cool!
let g:git_messenger_always_into_popup = v:true
" }}}

" THEME AND APPEARANCE {{{
syntax on                           " Syntax highlighting on
set number                          " Line numbers on
set wildmenu                        " Visual completion for command mode
set showcmd                         " Show the command being typed
set laststatus=2                    " Always show the statusbar
set noequalalways                   " Don't resize split on open/close event

" Whitespace chars to display with :set list
set listchars=space:·,tab:>–,trail:~,eol:¬

" COLORSCHEME
" Only gruv if you can handle it
" NOTE: for initial check, check $TERM, not &term, as nvim has &term=nvim
if $TERM =~# '256color' &&
    \ (has("termguicolors") || has('gui_running')) &&
    \ filereadable(s:vimdir . "/pack/mine/start/gruvbox/colors/gruvbox.vim")

    set termguicolors
    colorscheme gruvbox

    " See :h xterm-true-color for tmux+termguicolors
    " TODO: is this safe to blindly set always (in 256 color mode)?
    if &term =~# '^\(tmux\|st\|screen\)'
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif

    set background=dark

    augroup CurLineToggle
        autocmd!
        autocmd InsertEnter,InsertLeave * set cul!
    augroup END
else
    " Can't handle the gruv
    set background=light
    colorscheme vc
endif

" }}}

" KEY MAPPINGS {{{
" set leader to be spacebar
let mapleader = " "

"Map ctrl-i/j/k/h to switch between splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Terminal mappings
" NOTE: a couple limitations here:
" 1) Vim interprets arrows as escape sequences --> remapping escape is no-go
" 2) Alacritty cannot handle meta on mac (currently)
"
" With this in mind, the goal is to make cross-vim keys consistent
if has('terminal') || has('nvim')
    tnoremap <C-W> <C-\><C-N><C-W>
endif

" Paste from clipboard without any formatting issues
nnoremap <C-p> :call vimrc#SetPasteAndPasteFromClipboard()<CR>

" Clear trailing whitespace (through regexp)
nnoremap <leader><space> :call utils#CMDPreserve("%s/\\s\\+$//e")<CR>

" edit in current buffer dir
nnoremap <leader>e :e %:h/
nnoremap <leader>v :vsp %:h/
nnoremap <leader>s :sp %:h/

" quick toggle for light/dark background
nnoremap <leader>L :set background=light<CR>
nnoremap <leader>D :set background=dark<CR>

" toggle color column (to ensure short lines)
nnoremap <expr> <leader>C vimrc#ToggleColorColumn()

" Quick open current directory of file being edited
if isdirectory(s:vimdir . '/pack/plugins/start/vim-dirvish')
    " Don't load netrw -- Dirvish #137
    let loaded_netrwPlugin = 1
    nnoremap <leader>d :Dirvish %:p:h<CR>
else
    nnoremap <leader>d :Explore<CR>
endif

" easier tab switching (good for use w terminal wher gt doesn't work)
nnoremap <C-w>t :tabnext<CR>

" call fzf!
nnoremap <leader>f :FZF<CR>

" 2 space / 4 space toggle
nnoremap <leader>2 :setlocal softtabstop=2 shiftwidth=2<CR>
nnoremap <leader>4 :setlocal softtabstop=4 shiftwidth=4<CR>

" Faster file navigation
nnoremap <LEFT> :cprev<CR>
nnoremap <RIGHT> :cnext<CR>
nnoremap <UP> :prev<CR>
nnoremap <DOWN> :next<CR>

" Clear that highlight!
nnoremap <BS> :nohlsearch<CR>

" Get greppin quick! --> search word under cursor (escape # for VimL autoload)
nnoremap <leader>g :exe "grep " . substitute(expand('<cword>'), '#', '\\#', 'g')<CR>
nnoremap <silent> <leader>G :call vimrc#GitGrepWordUnderCursor()<CR>:copen<CR>

" Toggle whitespace
nnoremap <leader>w :set list!<CR>

" Yank entire file
nnoremap <leader>y gg"+yG<C-O><C-O>

" Edit vimrc (TODO: get working for neovim)
nnoremap <leader>V :edit $MYVIMRC<CR>
" }}}

" COMMANDS {{{
command! -nargs=1 GitGrep call vimrc#GitGrep('<args>') | copen
command! CD exe 'cd ' . expand('%:h')
command! PDB call vimrc#PerlDebugger()
" }}}

" vim:fdm=marker:sts=4:sw=4
